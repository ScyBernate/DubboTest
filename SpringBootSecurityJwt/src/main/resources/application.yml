server:
    port: 8180
    
spring:
    jpa:
        database-platform: org.hibernate.dialect.MySQL57InnoDBDialect
        database: MYSQL
        properties.hibernate:
            hbm2ddl.auto: none
            show_sql: true
            
    rabbitmq:
        host: localhost
        port: 15672
        username: guest
        password: guest
            
    
druid:
    url: jdbc:mysql://localhost:3306/myboot?createDatabaseIfNotExist=true&useUnicode=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&verifyServerCertificate=false&useSSL=false&sessionVariables=sql_mode='NO_ENGINE_SUBSTITUTION'&jdbcCompliantTruncation=false
    driver-class: com.mysql.jdbc.Driver
    username: root
    password: root
    initial-size: 1
    min-idle: 1
    max-active: 20
    test-on-borrow: true
    max-wait: 60000
    time-between-eviction-runs-millis: 60000
    min-evictable-idle-time-millis: 300000
    validation-query: SELECT 1 FROM DUAL
    test-While-Idle: true
    test-on-return: false
    pool-prepared-statements: false
    max-pool-prepared-statement-per-connection-size: 20
    filters: stat,wall,log4j,config
#    connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000;config.decrypt=false
#    monitor:
#          enabled: enabled # 配置此属性Monitor才生效
#          druid-stat-view: /druid/*
#          druid-web-stat-filter: /*
#          allow: 127.0.0.1
#          deny: 219.230.50.108
#          login-username: admin
#          login-password: 123456
#          exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
    
    
springfox.documentation.swagger.v2.path: /a1

logging:
    pattern:
#        console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} [%thread] %-5level %class - %msg%n"
        console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%logger){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
        #   <property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>
        #   <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"/>

    level:
        ROOT: INFO
        org.apache: ERROR
        org.apache.http: DEBUG
        org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader: ERROR
        org.springframework.web: ERROR
        org.springframework.security.web.util.matcher: ERROR
        org.springframework.bean: ERROR
        org.springframework.context: ERROR
        org.springframework.security: DEBUG
        org.xnio: ERROR
        springfox: ERROR
        io.undertow: ERROR
        org.hibernate: ERROR
        org.dozer: ERROR
        jdbc.connection: OFF
        jdbc.resultset: OFF
        jdbc.resultsettable: INFO
        jdbc.audit: OFF
        jdbc.sqltiming: OFF
        jdbc.sqlonly: DEBUG
        
# JWT
jwt:
  header: Authorization
  secret: mySecret
  expiration: 60
  tokenHead: "Bearer "
  route:
    authentication:
      path: auth
      refresh: refresh
      register: auth/register

